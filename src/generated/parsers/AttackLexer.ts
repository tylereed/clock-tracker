// Generated from grammars/Attack.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class AttackLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly MARKUP = 24;
	public static readonly MELEE = 25;
	public static readonly RANGED = 26;
	public static readonly WEAPON = 27;
	public static readonly SPELL = 28;
	public static readonly DICE = 29;
	public static readonly DAMAGE_TYPE = 30;
	public static readonly NUMBER = 31;
	public static readonly NUMBER_TEXT = 32;
	public static readonly TEXT = 33;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "':'", 
                                                            "' '", "', '", 
                                                            "','", "'.'", 
                                                            "' Attack'", 
                                                            "' or '", "'+'", 
                                                            "' to hit'", 
                                                            "'reach '", 
                                                            "' ft.'", "'range '", 
                                                            "'/'", "'target'", 
                                                            "'targets'", 
                                                            "'Hit:'", "' ('", 
                                                            "') '", "' damage'", 
                                                            "' plus'", "', or '", 
                                                            "' if used with two hands'", 
                                                            "' to make a melee attack'", 
                                                            null, "'Melee'", 
                                                            "'Ranged'", 
                                                            "'Weapon'", 
                                                            "'Spell'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             "MARKUP", "MELEE", 
                                                             "RANGED", "WEAPON", 
                                                             "SPELL", "DICE", 
                                                             "DAMAGE_TYPE", 
                                                             "NUMBER", "NUMBER_TEXT", 
                                                             "TEXT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "MARKUP", "MELEE", 
		"RANGED", "WEAPON", "SPELL", "DICE", "DAMAGE_TYPE", "NUMBER", "NUMBER_TEXT", 
		"TEXT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, AttackLexer._ATN, AttackLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Attack.g4"; }

	public get literalNames(): (string | null)[] { return AttackLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return AttackLexer.symbolicNames; }
	public get ruleNames(): string[] { return AttackLexer.ruleNames; }

	public get serializedATN(): number[] { return AttackLexer._serializedATN; }

	public get channelNames(): string[] { return AttackLexer.channelNames; }

	public get modeNames(): string[] { return AttackLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,33,434,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
	5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
	8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
	1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
	19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,
	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
	21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
	23,4,23,218,8,23,11,23,12,23,219,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
	1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
	27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,251,8,28,1,28,1,28,1,28,3,28,256,
	8,28,1,28,1,28,3,28,260,8,28,1,28,3,28,263,8,28,1,29,1,29,1,29,1,29,1,29,
	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,353,8,29,1,30,
	4,30,356,8,30,11,30,12,30,357,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
	31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
	1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,396,
	8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
	1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,433,8,32,0,0,33,1,1,3,2,5,3,7,4,
	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
	59,30,61,31,63,32,65,33,1,0,2,2,0,43,43,45,45,1,0,48,57,472,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
	0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,69,
	1,0,0,0,5,71,1,0,0,0,7,74,1,0,0,0,9,76,1,0,0,0,11,78,1,0,0,0,13,86,1,0,
	0,0,15,91,1,0,0,0,17,93,1,0,0,0,19,101,1,0,0,0,21,108,1,0,0,0,23,113,1,
	0,0,0,25,120,1,0,0,0,27,122,1,0,0,0,29,129,1,0,0,0,31,137,1,0,0,0,33,142,
	1,0,0,0,35,145,1,0,0,0,37,148,1,0,0,0,39,156,1,0,0,0,41,162,1,0,0,0,43,
	168,1,0,0,0,45,192,1,0,0,0,47,217,1,0,0,0,49,223,1,0,0,0,51,229,1,0,0,0,
	53,236,1,0,0,0,55,243,1,0,0,0,57,250,1,0,0,0,59,352,1,0,0,0,61,355,1,0,
	0,0,63,395,1,0,0,0,65,432,1,0,0,0,67,68,5,58,0,0,68,2,1,0,0,0,69,70,5,32,
	0,0,70,4,1,0,0,0,71,72,5,44,0,0,72,73,5,32,0,0,73,6,1,0,0,0,74,75,5,44,
	0,0,75,8,1,0,0,0,76,77,5,46,0,0,77,10,1,0,0,0,78,79,5,32,0,0,79,80,5,65,
	0,0,80,81,5,116,0,0,81,82,5,116,0,0,82,83,5,97,0,0,83,84,5,99,0,0,84,85,
	5,107,0,0,85,12,1,0,0,0,86,87,5,32,0,0,87,88,5,111,0,0,88,89,5,114,0,0,
	89,90,5,32,0,0,90,14,1,0,0,0,91,92,5,43,0,0,92,16,1,0,0,0,93,94,5,32,0,
	0,94,95,5,116,0,0,95,96,5,111,0,0,96,97,5,32,0,0,97,98,5,104,0,0,98,99,
	5,105,0,0,99,100,5,116,0,0,100,18,1,0,0,0,101,102,5,114,0,0,102,103,5,101,
	0,0,103,104,5,97,0,0,104,105,5,99,0,0,105,106,5,104,0,0,106,107,5,32,0,
	0,107,20,1,0,0,0,108,109,5,32,0,0,109,110,5,102,0,0,110,111,5,116,0,0,111,
	112,5,46,0,0,112,22,1,0,0,0,113,114,5,114,0,0,114,115,5,97,0,0,115,116,
	5,110,0,0,116,117,5,103,0,0,117,118,5,101,0,0,118,119,5,32,0,0,119,24,1,
	0,0,0,120,121,5,47,0,0,121,26,1,0,0,0,122,123,5,116,0,0,123,124,5,97,0,
	0,124,125,5,114,0,0,125,126,5,103,0,0,126,127,5,101,0,0,127,128,5,116,0,
	0,128,28,1,0,0,0,129,130,5,116,0,0,130,131,5,97,0,0,131,132,5,114,0,0,132,
	133,5,103,0,0,133,134,5,101,0,0,134,135,5,116,0,0,135,136,5,115,0,0,136,
	30,1,0,0,0,137,138,5,72,0,0,138,139,5,105,0,0,139,140,5,116,0,0,140,141,
	5,58,0,0,141,32,1,0,0,0,142,143,5,32,0,0,143,144,5,40,0,0,144,34,1,0,0,
	0,145,146,5,41,0,0,146,147,5,32,0,0,147,36,1,0,0,0,148,149,5,32,0,0,149,
	150,5,100,0,0,150,151,5,97,0,0,151,152,5,109,0,0,152,153,5,97,0,0,153,154,
	5,103,0,0,154,155,5,101,0,0,155,38,1,0,0,0,156,157,5,32,0,0,157,158,5,112,
	0,0,158,159,5,108,0,0,159,160,5,117,0,0,160,161,5,115,0,0,161,40,1,0,0,
	0,162,163,5,44,0,0,163,164,5,32,0,0,164,165,5,111,0,0,165,166,5,114,0,0,
	166,167,5,32,0,0,167,42,1,0,0,0,168,169,5,32,0,0,169,170,5,105,0,0,170,
	171,5,102,0,0,171,172,5,32,0,0,172,173,5,117,0,0,173,174,5,115,0,0,174,
	175,5,101,0,0,175,176,5,100,0,0,176,177,5,32,0,0,177,178,5,119,0,0,178,
	179,5,105,0,0,179,180,5,116,0,0,180,181,5,104,0,0,181,182,5,32,0,0,182,
	183,5,116,0,0,183,184,5,119,0,0,184,185,5,111,0,0,185,186,5,32,0,0,186,
	187,5,104,0,0,187,188,5,97,0,0,188,189,5,110,0,0,189,190,5,100,0,0,190,
	191,5,115,0,0,191,44,1,0,0,0,192,193,5,32,0,0,193,194,5,116,0,0,194,195,
	5,111,0,0,195,196,5,32,0,0,196,197,5,109,0,0,197,198,5,97,0,0,198,199,5,
	107,0,0,199,200,5,101,0,0,200,201,5,32,0,0,201,202,5,97,0,0,202,203,5,32,
	0,0,203,204,5,109,0,0,204,205,5,101,0,0,205,206,5,108,0,0,206,207,5,101,
	0,0,207,208,5,101,0,0,208,209,5,32,0,0,209,210,5,97,0,0,210,211,5,116,0,
	0,211,212,5,116,0,0,212,213,5,97,0,0,213,214,5,99,0,0,214,215,5,107,0,0,
	215,46,1,0,0,0,216,218,5,95,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,
	1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,222,6,23,0,0,222,48,1,0,0,0,
	223,224,5,77,0,0,224,225,5,101,0,0,225,226,5,108,0,0,226,227,5,101,0,0,
	227,228,5,101,0,0,228,50,1,0,0,0,229,230,5,82,0,0,230,231,5,97,0,0,231,
	232,5,110,0,0,232,233,5,103,0,0,233,234,5,101,0,0,234,235,5,100,0,0,235,
	52,1,0,0,0,236,237,5,87,0,0,237,238,5,101,0,0,238,239,5,97,0,0,239,240,
	5,112,0,0,240,241,5,111,0,0,241,242,5,110,0,0,242,54,1,0,0,0,243,244,5,
	83,0,0,244,245,5,112,0,0,245,246,5,101,0,0,246,247,5,108,0,0,247,248,5,
	108,0,0,248,56,1,0,0,0,249,251,3,61,30,0,250,249,1,0,0,0,250,251,1,0,0,
	0,251,252,1,0,0,0,252,253,5,100,0,0,253,262,3,61,30,0,254,256,5,32,0,0,
	255,254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,259,7,0,0,0,258,260,
	5,32,0,0,259,258,1,0,0,0,259,260,1,0,0,0,260,261,1,0,0,0,261,263,3,61,30,
	0,262,255,1,0,0,0,262,263,1,0,0,0,263,58,1,0,0,0,264,265,5,97,0,0,265,266,
	5,99,0,0,266,267,5,105,0,0,267,353,5,100,0,0,268,269,5,98,0,0,269,270,5,
	108,0,0,270,271,5,117,0,0,271,272,5,100,0,0,272,273,5,103,0,0,273,274,5,
	101,0,0,274,275,5,111,0,0,275,276,5,110,0,0,276,277,5,105,0,0,277,278,5,
	110,0,0,278,353,5,103,0,0,279,280,5,99,0,0,280,281,5,111,0,0,281,282,5,
	108,0,0,282,353,5,100,0,0,283,284,5,102,0,0,284,285,5,105,0,0,285,286,5,
	114,0,0,286,353,5,101,0,0,287,288,5,102,0,0,288,289,5,111,0,0,289,290,5,
	114,0,0,290,291,5,99,0,0,291,353,5,101,0,0,292,293,5,108,0,0,293,294,5,
	105,0,0,294,295,5,103,0,0,295,296,5,104,0,0,296,297,5,116,0,0,297,298,5,
	110,0,0,298,299,5,105,0,0,299,300,5,110,0,0,300,353,5,103,0,0,301,302,5,
	110,0,0,302,303,5,101,0,0,303,304,5,99,0,0,304,305,5,114,0,0,305,306,5,
	111,0,0,306,307,5,116,0,0,307,308,5,105,0,0,308,353,5,99,0,0,309,310,5,
	112,0,0,310,311,5,105,0,0,311,312,5,101,0,0,312,313,5,114,0,0,313,314,5,
	99,0,0,314,315,5,105,0,0,315,316,5,110,0,0,316,353,5,103,0,0,317,318,5,
	112,0,0,318,319,5,111,0,0,319,320,5,105,0,0,320,321,5,115,0,0,321,322,5,
	111,0,0,322,353,5,110,0,0,323,324,5,112,0,0,324,325,5,115,0,0,325,326,5,
	121,0,0,326,327,5,99,0,0,327,328,5,104,0,0,328,329,5,105,0,0,329,353,5,
	99,0,0,330,331,5,114,0,0,331,332,5,97,0,0,332,333,5,100,0,0,333,334,5,105,
	0,0,334,335,5,97,0,0,335,336,5,110,0,0,336,353,5,116,0,0,337,338,5,115,
	0,0,338,339,5,108,0,0,339,340,5,97,0,0,340,341,5,115,0,0,341,342,5,104,
	0,0,342,343,5,105,0,0,343,344,5,110,0,0,344,353,5,103,0,0,345,346,5,116,
	0,0,346,347,5,104,0,0,347,348,5,117,0,0,348,349,5,110,0,0,349,350,5,100,
	0,0,350,351,5,101,0,0,351,353,5,114,0,0,352,264,1,0,0,0,352,268,1,0,0,0,
	352,279,1,0,0,0,352,283,1,0,0,0,352,287,1,0,0,0,352,292,1,0,0,0,352,301,
	1,0,0,0,352,309,1,0,0,0,352,317,1,0,0,0,352,323,1,0,0,0,352,330,1,0,0,0,
	352,337,1,0,0,0,352,345,1,0,0,0,353,60,1,0,0,0,354,356,7,1,0,0,355,354,
	1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,62,1,0,0,0,
	359,360,5,111,0,0,360,361,5,110,0,0,361,396,5,101,0,0,362,363,5,116,0,0,
	363,364,5,119,0,0,364,396,5,111,0,0,365,366,5,116,0,0,366,367,5,104,0,0,
	367,368,5,114,0,0,368,369,5,101,0,0,369,396,5,101,0,0,370,371,5,102,0,0,
	371,372,5,111,0,0,372,373,5,117,0,0,373,396,5,114,0,0,374,375,5,102,0,0,
	375,376,5,105,0,0,376,377,5,118,0,0,377,396,5,101,0,0,378,379,5,115,0,0,
	379,380,5,105,0,0,380,396,5,120,0,0,381,382,5,115,0,0,382,383,5,101,0,0,
	383,384,5,118,0,0,384,385,5,101,0,0,385,396,5,110,0,0,386,387,5,101,0,0,
	387,388,5,105,0,0,388,389,5,103,0,0,389,390,5,104,0,0,390,396,5,116,0,0,
	391,392,5,110,0,0,392,393,5,105,0,0,393,394,5,110,0,0,394,396,5,101,0,0,
	395,359,1,0,0,0,395,362,1,0,0,0,395,365,1,0,0,0,395,370,1,0,0,0,395,374,
	1,0,0,0,395,378,1,0,0,0,395,381,1,0,0,0,395,386,1,0,0,0,395,391,1,0,0,0,
	396,64,1,0,0,0,397,433,9,0,0,0,398,433,3,61,30,0,399,433,3,63,31,0,400,
	433,3,59,29,0,401,433,3,57,28,0,402,433,3,55,27,0,403,433,3,53,26,0,404,
	433,3,51,25,0,405,433,3,49,24,0,406,433,5,32,0,0,407,408,5,116,0,0,408,
	409,5,97,0,0,409,410,5,114,0,0,410,411,5,103,0,0,411,412,5,101,0,0,412,
	433,5,116,0,0,413,414,5,116,0,0,414,415,5,97,0,0,415,416,5,114,0,0,416,
	417,5,103,0,0,417,418,5,101,0,0,418,419,5,116,0,0,419,433,5,115,0,0,420,
	421,5,32,0,0,421,422,5,100,0,0,422,423,5,97,0,0,423,424,5,109,0,0,424,425,
	5,97,0,0,425,426,5,103,0,0,426,433,5,101,0,0,427,428,5,32,0,0,428,429,5,
	112,0,0,429,430,5,108,0,0,430,431,5,117,0,0,431,433,5,115,0,0,432,397,1,
	0,0,0,432,398,1,0,0,0,432,399,1,0,0,0,432,400,1,0,0,0,432,401,1,0,0,0,432,
	402,1,0,0,0,432,403,1,0,0,0,432,404,1,0,0,0,432,405,1,0,0,0,432,406,1,0,
	0,0,432,407,1,0,0,0,432,413,1,0,0,0,432,420,1,0,0,0,432,427,1,0,0,0,433,
	66,1,0,0,0,10,0,219,250,255,259,262,352,357,395,432,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!AttackLexer.__ATN) {
			AttackLexer.__ATN = new ATNDeserializer().deserialize(AttackLexer._serializedATN);
		}

		return AttackLexer.__ATN;
	}


	static DecisionsToDFA = AttackLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}